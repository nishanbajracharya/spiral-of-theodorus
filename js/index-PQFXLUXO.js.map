{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import 'normalize.css';\n\nimport './style.css';\n\nfunction randomColor(alpha: number) {\n  return `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(\n    Math.random() * 255\n  )}, ${alpha})`;\n}\n\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d')!;\ncanvas.width = window.innerWidth - 10;\ncanvas.height = window.innerHeight - 10;\n\nconst app = document.querySelector('#app')!;\n\napp.appendChild(canvas);\n\nconst mouse = {\n  x: 0,\n  y: 0,\n};\n\nlet spiralCount = 16;\nlet size = 100;\n\nconst query = window.location.search;\nif (query) {\n  const params = new URLSearchParams(query);\n\n  const count = params.get('count');\n  if (count) {\n    const input = parseInt(count);\n    if (Number.isInteger(input) && input > 0) {\n      spiralCount = input;\n    }\n  }\n\n  const sizeParam = params.get('size');\n  if (sizeParam) {\n    const input = parseInt(sizeParam);\n    if (Number.isInteger(input) && input > 0) {\n      size = input;\n    }\n  }\n}\n\nconst colors = Array(spiralCount)\n  .fill('')\n  .map(() => randomColor(0.5));\n\ncanvas.addEventListener('mousemove', (e) => {\n  e.clientX;\n  e.clientY;\n\n  mouse.x = e.clientX - canvas.offsetLeft;\n  mouse.y = e.clientY - canvas.offsetTop;\n});\n\nfunction draw() {\n  ctx.reset();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Recursively draw triangle\n  let angle = 0;\n  for (let i = 0; i < spiralCount; i++) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = '#fff';\n    ctx.fillStyle = colors[i];\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.moveTo(0, 0);\n    ctx.rotate(angle);\n    ctx.lineTo(size * Math.sqrt(i + 1), 0);\n    ctx.lineTo(size * Math.sqrt(i + 1), -size);\n    ctx.lineTo(0, 0);\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n    ctx.restore();\n    angle -= Math.acos(Math.sqrt(i + 1) / Math.sqrt(i + 2));\n  }\n\n  // Draw cursor\n  ctx.fillStyle = '#fff';\n  ctx.fillText(`(${mouse.x}, ${mouse.y})`, mouse.x, mouse.y);\n\n  requestAnimationFrame(draw);\n}\n\nrequestAnimationFrame(draw);\n"],
  "mappings": "MAIA,SAASA,EAAYC,EAAe,CAClC,MAAO,QAAQ,KAAK,MAAM,KAAK,OAAO,EAAI,GAAG,CAAC,KAAK,KAAK,MAAM,KAAK,OAAO,EAAI,GAAG,CAAC,KAAK,KAAK,MAC1F,KAAK,OAAO,EAAI,GAClB,CAAC,KAAKA,CAAK,GACb,CAEA,IAAMC,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAMD,EAAO,WAAW,IAAI,EAClCA,EAAO,MAAQ,OAAO,WAAa,GACnCA,EAAO,OAAS,OAAO,YAAc,GAErC,IAAME,EAAM,SAAS,cAAc,MAAM,EAEzCA,EAAI,YAAYF,CAAM,EAEtB,IAAMG,EAAQ,CACZ,EAAG,EACH,EAAG,CACL,EAEIC,EAAc,GACdC,EAAO,IAELC,EAAQ,OAAO,SAAS,OAC9B,GAAIA,EAAO,CACT,IAAMC,EAAS,IAAI,gBAAgBD,CAAK,EAElCE,EAAQD,EAAO,IAAI,OAAO,EAChC,GAAIC,EAAO,CACT,IAAMC,EAAQ,SAASD,CAAK,EACxB,OAAO,UAAUC,CAAK,GAAKA,EAAQ,IACrCL,EAAcK,EAElB,CAEA,IAAMC,EAAYH,EAAO,IAAI,MAAM,EACnC,GAAIG,EAAW,CACb,IAAMD,EAAQ,SAASC,CAAS,EAC5B,OAAO,UAAUD,CAAK,GAAKA,EAAQ,IACrCJ,EAAOI,EAEX,CACF,CAEA,IAAME,EAAS,MAAMP,CAAW,EAC7B,KAAK,EAAE,EACP,IAAI,IAAMN,EAAY,EAAG,CAAC,EAE7BE,EAAO,iBAAiB,YAAcY,GAAM,CAC1CA,EAAE,QACFA,EAAE,QAEFT,EAAM,EAAIS,EAAE,QAAUZ,EAAO,WAC7BG,EAAM,EAAIS,EAAE,QAAUZ,EAAO,SAC/B,CAAC,EAED,SAASa,GAAO,CACdZ,EAAI,MAAM,EACVA,EAAI,UAAU,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,EAG/C,IAAIc,EAAQ,EACZ,QAASC,EAAI,EAAGA,EAAIX,EAAaW,IAC/Bd,EAAI,KAAK,EACTA,EAAI,UAAU,EACdA,EAAI,YAAc,OAClBA,EAAI,UAAYU,EAAOI,CAAC,EACxBd,EAAI,UAAUD,EAAO,MAAQ,EAAGA,EAAO,OAAS,CAAC,EACjDC,EAAI,OAAO,EAAG,CAAC,EACfA,EAAI,OAAOa,CAAK,EAChBb,EAAI,OAAOI,EAAO,KAAK,KAAKU,EAAI,CAAC,EAAG,CAAC,EACrCd,EAAI,OAAOI,EAAO,KAAK,KAAKU,EAAI,CAAC,EAAG,CAACV,CAAI,EACzCJ,EAAI,OAAO,EAAG,CAAC,EACfA,EAAI,KAAK,EACTA,EAAI,OAAO,EACXA,EAAI,UAAU,EACdA,EAAI,QAAQ,EACZa,GAAS,KAAK,KAAK,KAAK,KAAKC,EAAI,CAAC,EAAI,KAAK,KAAKA,EAAI,CAAC,CAAC,EAIxDd,EAAI,UAAY,OAChBA,EAAI,SAAS,IAAIE,EAAM,CAAC,KAAKA,EAAM,CAAC,IAAKA,EAAM,EAAGA,EAAM,CAAC,EAEzD,sBAAsBU,CAAI,CAC5B,CAEA,sBAAsBA,CAAI",
  "names": ["randomColor", "alpha", "canvas", "ctx", "app", "mouse", "spiralCount", "size", "query", "params", "count", "input", "sizeParam", "colors", "e", "draw", "angle", "i"]
}
